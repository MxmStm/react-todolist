{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodolistHeader.tsx","components/Buttons/ButtonsBlock.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","status","res","action","type","updateTaskAC","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","size","IconButton","onClick","AddBoxOutlined","EditableSpan","userNewTitle","setUserNewTitle","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","ListItem","divider","className","Checkbox","color","DeleteOutline","TodolistHeader","removeTodolist","style","textAlign","changeTodolistTitle","Delete","ButtonsBlock","filter","setFilterValue","ButtonGroup","fullWidth","Button","Todolist","useDispatch","useEffect","thunk","setTasksAC","data","items","addTask","changeFilter","tasksForTodolist","List","map","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","justifyContent","padding","spacing","tl","allTodolistTasks","Paper","elevation","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bcf7fdae.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '193fc14b-7133-4358-b157-8b260b27418c'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            dispatch(changeTodolistTitleAC(id, title))\r\n        })\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType }\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            const action = setTasksAC(tasks, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            const task = res.data.data.item\r\n            const action = addTaskAC(task)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                dispatch(action)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBoxOutlined} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    console.log('AddItemForm called')\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                error={!!error}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                size={\"small\"}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <AddBoxOutlined/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    console.log('EditableSpan called');\r\n\r\n    const [userNewTitle, setUserNewTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeSetUserText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setUserNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(userNewTitle)\r\n    }\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === \"Enter\" && offEditMode()\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                autoFocus={true}\r\n                value={userNewTitle}\r\n                onChange={onChangeSetUserText}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {Checkbox, IconButton, ListItem} from \"@material-ui/core\";\r\nimport {DeleteOutline} from \"@material-ui/icons\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props]);\r\n\r\n    return (\r\n        <ListItem divider>\r\n             <span className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            size={'small'}\r\n            color={'primary'}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            onChange={onChangeHandler}\r\n        />\r\n        <EditableSpan\r\n            title={props.task.title}\r\n            changeTitle={onTitleChangeHandler}/>\r\n            </span>\r\n            <IconButton onClick={onClickHandler}>\r\n                <DeleteOutline/>\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodolistHeaderPropsType = {\r\n    title: string\r\n    removeTodolist: () => void\r\n    changeTodolistTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const TodolistHeader: React.FC<TodolistHeaderPropsType> = (\r\n    {\r\n        title,\r\n        removeTodolist,\r\n        ...props\r\n    }\r\n) => {\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={title}\r\n                    changeTitle={props.changeTodolistTitle}\r\n                />\r\n                <IconButton\r\n                    onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {Button, ButtonGroup} from \"@material-ui/core\";\r\nimport {FilterValuesType} from \"../../features/TodolistsList/todolists-reducer\";\r\n\r\ntype ButtonsBlockType = {\r\n    filter: FilterValuesType\r\n    setFilterValue: (filter: FilterValuesType) => () => void\r\n}\r\n\r\nexport const ButtonsBlock = ({\r\n                          filter,\r\n                          setFilterValue,\r\n                          ...props\r\n                      }: ButtonsBlockType) => {\r\n    return (\r\n        <ButtonGroup\r\n            variant={'contained'}\r\n            size={'small'}\r\n            fullWidth>\r\n            <Button\r\n                color={filter === \"all\" ? 'primary' : 'secondary'}\r\n                onClick={setFilterValue('all')}>\r\n                All\r\n            </Button>\r\n            <Button\r\n                color={filter === \"active\" ? 'primary' : 'secondary'}\r\n                onClick={setFilterValue('active')}>\r\n                Active\r\n            </Button>\r\n            <Button\r\n                color={filter === \"completed\" ? 'primary' : 'secondary'}\r\n                onClick={setFilterValue('completed')}>\r\n                Completed\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n};\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {TodolistHeader} from \"./TodolistHeader\";\r\nimport {List} from '@material-ui/core'\r\nimport {ButtonsBlock} from \"../../../components/Buttons/ButtonsBlock\";\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [dispatch, props.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props])\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props])\r\n\r\n    const setFilterValue = useCallback((filter: FilterValuesType) =>\r\n        () => {\r\n            props.changeFilter(filter, props.id)\r\n        }, [props]\r\n    )\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div className={'todolist'}>\r\n            <TodolistHeader\r\n                title={props.title}\r\n                removeTodolist={removeTodolist}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n            />\r\n            <AddItemForm addItem={addTask}/>\r\n            <List>\r\n                {tasksForTodolist.map(t =>\r\n                    <Task key={t.id}\r\n                          task={t}\r\n                          todolistId={props.id}\r\n                          removeTask={props.removeTask}\r\n                          changeTaskTitle={props.changeTaskTitle}\r\n                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)}\r\n            </List>\r\n            <ButtonsBlock filter={props.filter} setFilterValue={setFilterValue}/>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    return <>\r\n        <Grid\r\n            container\r\n            justifyContent={'center'}\r\n            style={{padding: '25px 0'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid\r\n            container\r\n            justifyContent={'center'}\r\n            spacing={6}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={10} style={{padding: \"20px\"}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        To Do List\r\n                    </Typography>\r\n                    <Button color=\"inherit\" variant={\"outlined\"}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}