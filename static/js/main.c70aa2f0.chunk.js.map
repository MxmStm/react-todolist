{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodolistHeader.tsx","components/Buttons/ButtonsBlock.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","loginParams","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","error","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","updateTaskAC","catch","console","warn","rootReducer","combineReducers","state","action","filter","todoListId","map","todolist","copyState","todolists","forEach","tl","entityStatus","app","auth","store","createStore","applyMiddleware","thunk","useAppSelector","useSelector","window","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","size","disabled","IconButton","onClick","EditableSpan","userNewTitle","setUserNewTitle","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","ListItem","divider","className","Checkbox","color","TodolistHeader","removeTodolist","style","textAlign","changeTodolistTitle","ButtonsBlock","setFilterValue","ButtonGroup","fullWidth","Button","Todolist","useDispatch","useEffect","items","setTasksAC","addTask","changeFilter","tasksForTodolist","List","TodolistsList","navigate","useNavigate","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","justifyContent","padding","spacing","allTodolistTasks","Paper","elevation","Alert","forwardRef","ref","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","finally","AppBar","position","Toolbar","Typography","LinearProgress","Container","fixed","path","element","top","width","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c70aa2f0.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '193fc14b-7133-4358-b157-8b260b27418c'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\nexport const authAPI = {\r\n    login(loginParams: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{ userId: number }>>>('auth/login', loginParams)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<MeResponseType>>('auth/me')\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\nexport type MeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {AppActionsType, setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch:\r\n    ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (message: string, dispatch:\r\n    ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(message))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<AppActionsType>\r\n","import {Dispatch} from 'redux'\r\nimport {AppActionsType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action:\r\n    ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\nexport const loginTC = (loginParams: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(loginParams)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | AppActionsType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action:\r\n    AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppErrorAC = (error: string | null) =>\r\n    ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: 'APP/SET-IS-INITIALIZED', isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true));\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n}\r\n\r\ntype SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\ntype SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\ntype SetIsInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\nexport type AppActionsType = SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | SetIsInitializedActionType\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {AppActionsType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTaskAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(error.message, dispatch)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | AppActionsType\r\n    | ReturnType<typeof setTasksAC>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppActionsType, RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, entityStatus} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error.message, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | SetTodolistsActionType\r\n    | AppActionsType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport AddBoxOutlined from \"@material-ui/icons/AddBoxOutlined\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant={\"outlined\"}\r\n                error={!!error}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={\"Title\"}\r\n                helperText={error}\r\n                size={\"small\"}\r\n                disabled={props.disabled}\r\n            />\r\n            <IconButton onClick={addItem}>\r\n                <AddBoxOutlined/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    changeTitle: (newTitle: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n\r\n    const [userNewTitle, setUserNewTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeSetUserText = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setUserNewTitle(e.currentTarget.value)\r\n    }\r\n    const onEditMode = () => {\r\n        props.disabled ? setEditMode(false) : setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(userNewTitle)\r\n    }\r\n    const onKeyPressOffEditMode = (e: KeyboardEvent<HTMLInputElement>) =>\r\n        e.key === \"Enter\" && offEditMode()\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                autoFocus={true}\r\n                value={userNewTitle}\r\n                onChange={onChangeSetUserText}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onKeyPressOffEditMode}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props]);\r\n\r\n    return (\r\n        <ListItem divider>\r\n             <span className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            size={'small'}\r\n            color={'primary'}\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            onChange={onChangeHandler}\r\n        />\r\n        <EditableSpan\r\n            title={props.task.title}\r\n            changeTitle={onTitleChangeHandler}\r\n            disabled={props.disabled}/>\r\n            </span>\r\n            <IconButton onClick={onClickHandler}>\r\n                <DeleteOutline/>\r\n            </IconButton>\r\n        </ListItem>\r\n    )\r\n})\r\n","import React from 'react';\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Delete from \"@material-ui/icons/Delete\";\r\n\r\ntype TodolistHeaderPropsType = {\r\n    title: string\r\n    disabled: boolean\r\n    removeTodolist: () => void\r\n    changeTodolistTitle: (newTitle: string) => void\r\n}\r\n\r\nexport const TodolistHeader: React.FC<TodolistHeaderPropsType> = (\r\n    {\r\n        title,\r\n        removeTodolist,\r\n        ...props\r\n    }\r\n) => {\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <h3>\r\n                <EditableSpan\r\n                    title={title}\r\n                    changeTitle={props.changeTodolistTitle}\r\n                    disabled={props.disabled}\r\n                />\r\n                <IconButton\r\n                    onClick={removeTodolist}\r\n                    disabled={props.disabled}\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport {FilterValuesType} from \"../../features/TodolistsList/todolists-reducer\";\r\n\r\ntype ButtonsBlockType = {\r\n    filter: FilterValuesType\r\n    setFilterValue: (filter: FilterValuesType) => () => void\r\n}\r\n\r\nexport const ButtonsBlock = ({\r\n                                 filter,\r\n                                 setFilterValue,\r\n                                 ...props\r\n                             }: ButtonsBlockType) => {\r\n    return (\r\n        <ButtonGroup\r\n            variant={'contained'}\r\n            size={'small'}\r\n            fullWidth>\r\n            <Button\r\n                color={filter === \"all\" ? 'primary' : 'secondary'}\r\n                onClick={setFilterValue('all')}>\r\n                All\r\n            </Button>\r\n            <Button\r\n                color={filter === \"active\" ? 'primary' : 'secondary'}\r\n                onClick={setFilterValue('active')}>\r\n                Active\r\n            </Button>\r\n            <Button\r\n                color={filter === \"completed\" ? 'primary' : 'secondary'}\r\n                onClick={setFilterValue('completed')}>\r\n                Completed\r\n            </Button>\r\n        </ButtonGroup>\r\n    );\r\n};\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {TodolistHeader} from \"./TodolistHeader\";\r\nimport List from '@material-ui/core/List'\r\nimport {ButtonsBlock} from \"../../../components/Buttons/ButtonsBlock\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype TodolistPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [dispatch, props.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props])\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props])\r\n\r\n    const setFilterValue = useCallback((filter: FilterValuesType) =>\r\n        () => {\r\n            props.changeFilter(filter, props.id)\r\n        }, [props]\r\n    )\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div className={'todolist'}>\r\n            <TodolistHeader\r\n                title={props.title}\r\n                disabled={props.entityStatus === 'loading'}\r\n                removeTodolist={removeTodolist}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n            />\r\n            <AddItemForm\r\n                addItem={addTask}\r\n                disabled={props.entityStatus === 'loading'}\r\n            />\r\n            <List>\r\n                {tasksForTodolist.map(t =>\r\n                    <Task key={t.id}\r\n                          task={t}\r\n                          todolistId={props.id}\r\n                          removeTask={props.removeTask}\r\n                          changeTaskTitle={props.changeTaskTitle}\r\n                          changeTaskStatus={props.changeTaskStatus}\r\n                          disabled={props.entityStatus === 'loading'}\r\n                    />)}\r\n            </List>\r\n            <ButtonsBlock filter={props.filter} setFilterValue={setFilterValue}/>\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType, useAppSelector} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (isLoggedIn) {\r\n            const thunk = fetchTodolistsTC()\r\n            dispatch(thunk)\r\n        } else {\r\n            navigate('login')\r\n        }\r\n    }, [dispatch, isLoggedIn, navigate])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    // if (!isLoggedIn) {\r\n    //     return <Navigate to={'login'}/>\r\n    // }\r\n\r\n    return <>\r\n        <Grid\r\n            container\r\n            justifyContent={'center'}\r\n            style={{padding: '25px 0'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid\r\n            container\r\n            justifyContent={'center'}\r\n            spacing={6}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper elevation={10} style={{padding: \"20px\"}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport {Snackbar} from \"@material-ui/core\";\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n\r\n    return (\r\n        <MuiAlert elevation={6} ref={ref} variant={'filled'} {...props} />\r\n    );\r\n});\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useAppSelector<string | null>((state) => state.app.error)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={7000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity={'error'}>\r\n                😠 {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or less';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justifyContent={'center'}>\r\n            <Grid item>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <p>To log in get registered\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'} rel={'noreferrer'}> here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email\r\n                                && <div style={{color: \"red\"}}>\r\n                                    {formik.errors.email}</div>}\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password\r\n                                && <div style={{color: \"red\"}}>\r\n                                    {formik.errors.password}</div>}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={\r\n                                    <Checkbox checked={formik.values.rememberMe}\r\n                                              {...formik.getFieldProps('rememberMe')}/>}\r\n                            />\r\n                            <Button\r\n                                type={'submit'}\r\n                                variant={'contained'}\r\n                                color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport {useAppSelector} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nfunction App() {\r\n\r\n    // const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n    //вариант с useAppSelector, типизация в store\r\n    const status = useAppSelector<RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useAppSelector<boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return (\r\n            <div\r\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar style={{justifyContent: \"space-between\"}}>\r\n                    <Typography variant=\"h6\">\r\n                        To Do List\r\n                    </Typography>\r\n                    {isLoggedIn && <Button\r\n                        color=\"inherit\"\r\n                        variant={\"outlined\"}\r\n                        onClick={logoutHandler}>Logout\r\n                    </Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path={'/'} element={<TodolistsList/>}/>\r\n                    <Route path={'login'} element={<Login/>}/>\r\n                    <Route path={'404'} element={<h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path={'*'} element={<Navigate to={'404'}/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}